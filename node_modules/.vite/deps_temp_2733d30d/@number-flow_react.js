import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@number-flow/react/dist/index.mjs
var React2 = __toESM(require_react(), 1);

// node_modules/esm-env/true.js
var true_default = true;

// node_modules/number-flow/dist/plugins.mjs
var f = (e, n) => e == null ? n : n == null ? e : Math.max(e, n);
var i = /* @__PURE__ */ new WeakMap();
var l = {
  onUpdate(e, n, o) {
    if (i.set(o, void 0), !o.computedTrend)
      return;
    const s = n.integer.concat(n.fraction).filter((t) => t.type === "integer" || t.type === "fraction"), r = e.integer.concat(e.fraction).filter((t) => t.type === "integer" || t.type === "fraction"), u2 = s.find((t) => !r.find((c) => c.pos === t.pos && c.value === t.value)), a = r.find((t) => !s.find((c) => t.pos === c.pos && t.value === c.value));
    i.set(o, f(u2 == null ? void 0 : u2.pos, a == null ? void 0 : a.pos));
  },
  getDelta(e, n, o) {
    const s = e - n, r = i.get(o.flow);
    if (!s && r != null && r >= o.pos)
      return o.length * o.flow.computedTrend;
  }
};

// node_modules/number-flow/dist/lite-BTIaQdTe.mjs
var u = (n, t, e) => {
  const i2 = document.createElement(n), [s, a] = Array.isArray(t) ? [void 0, t] : [t, e];
  return s && Object.assign(i2, s), a == null || a.forEach((r) => i2.appendChild(r)), i2;
};
var F = (n, t) => {
  var e;
  return t === "left" ? n.offsetLeft : (((e = n.offsetParent instanceof HTMLElement ? n.offsetParent : null) == null ? void 0 : e.offsetWidth) ?? 0) - n.offsetWidth - n.offsetLeft;
};
var H = (n) => n.offsetWidth > 0 && n.offsetHeight > 0;
var st = (n, t) => {
  true_default && !customElements.get(n) && customElements.define(n, t);
};
function X(n, t, { reverse: e = false } = {}) {
  const i2 = n.length;
  for (let s = e ? i2 - 1 : 0; e ? s >= 0 : s < i2; e ? s-- : s++)
    t(n[s], s);
}
function nt(n, t, e, i2) {
  const s = t.formatToParts(n);
  e && s.unshift({ type: "prefix", value: e }), i2 && s.push({ type: "suffix", value: i2 });
  const a = [], r = [], o = [], c = [], d = {}, p = (h) => `${h}:${d[h] = (d[h] ?? -1) + 1}`;
  let x = "", g = false, y = false;
  for (const h of s) {
    x += h.value;
    const l2 = h.type === "minusSign" || h.type === "plusSign" ? "sign" : h.type;
    l2 === "integer" ? (g = true, r.push(...h.value.split("").map((C) => ({ type: l2, value: parseInt(C) })))) : l2 === "group" ? r.push({ type: l2, value: h.value }) : l2 === "decimal" ? (y = true, o.push({ type: l2, value: h.value, key: p(l2) })) : l2 === "fraction" ? o.push(...h.value.split("").map((C) => ({
      type: l2,
      value: parseInt(C),
      key: p(l2),
      pos: -1 - d[l2]
    }))) : (g || y ? c : a).push({
      type: l2,
      value: h.value,
      key: p(l2)
    });
  }
  const T = [];
  for (let h = r.length - 1; h >= 0; h--) {
    const l2 = r[h];
    T.unshift(l2.type === "integer" ? {
      ...l2,
      key: p(l2.type),
      pos: d[l2.type]
    } : {
      ...l2,
      key: p(l2.type)
    });
  }
  return {
    pre: a,
    integer: T,
    fraction: o,
    post: c,
    valueAsString: x,
    value: typeof n == "string" ? parseFloat(n) : n
  };
}
var I = String.raw;
var V = String.raw;
var O = true_default && (() => {
  try {
    document.createElement("div").animate({ opacity: 0 }, { easing: "linear(0, 1)" });
  } catch {
    return false;
  }
  return true;
})();
var z = true_default && typeof CSS < "u" && CSS.supports && CSS.supports("line-height", "mod(1,1)");
var A = true_default && typeof matchMedia < "u" ? matchMedia("(prefers-reduced-motion: reduce)") : null;
var $ = "--_number-flow-d-opacity";
var U = "--_number-flow-d-width";
var S = "--_number-flow-dx";
var j = "--_number-flow-d";
var Y = (() => {
  try {
    return CSS.registerProperty({
      name: $,
      syntax: "<number>",
      inherits: false,
      initialValue: "0"
    }), CSS.registerProperty({
      name: S,
      syntax: "<length>",
      inherits: true,
      initialValue: "0px"
    }), CSS.registerProperty({
      name: U,
      syntax: "<number>",
      inherits: false,
      initialValue: "0"
    }), CSS.registerProperty({
      name: j,
      syntax: "<number>",
      inherits: true,
      initialValue: "0"
    }), true;
  } catch {
    return false;
  }
})();
var P = "var(--number-flow-char-height, 1em)";
var f2 = "var(--number-flow-mask-height, 0.25em)";
var k = `calc(${f2} / 2)`;
var E = "var(--number-flow-mask-width, 0.5em)";
var m = `calc(${E} / var(--scale-x))`;
var w = "#000 0, transparent 71%";
var M = V`:host{display:inline-block;direction:ltr;white-space:nowrap;isolation:isolate;line-height:${P} !important}.number,.number__inner{display:inline-block;transform-origin:left top}:host([data-will-change]) :is(.number,.number__inner,.section,.digit,.digit__num,.symbol){will-change:transform}.number{--scale-x:calc(1 + var(${U}) / var(--width));transform:translateX(var(${S})) scaleX(var(--scale-x));margin:0 calc(-1 * ${E});position:relative;-webkit-mask-image:linear-gradient(to right,transparent 0,#000 ${m},#000 calc(100% - ${m}),transparent ),linear-gradient(to bottom,transparent 0,#000 ${f2},#000 calc(100% - ${f2}),transparent 100% ),radial-gradient(at bottom right,${w}),radial-gradient(at bottom left,${w}),radial-gradient(at top left,${w}),radial-gradient(at top right,${w});-webkit-mask-size:100% calc(100% - ${f2} * 2),calc(100% - ${m} * 2) 100%,${m} ${f2},${m} ${f2},${m} ${f2},${m} ${f2};-webkit-mask-position:center,center,top left,top right,bottom right,bottom left;-webkit-mask-repeat:no-repeat}.number__inner{padding:${k} ${E};transform:scaleX(calc(1 / var(--scale-x))) translateX(calc(-1 * var(${S})))}:host > :not(.number){z-index:5}.section,.symbol{display:inline-block;position:relative;isolation:isolate}.section::after{content:'\200b';display:inline-block}.section--justify-left{transform-origin:center left}.section--justify-right{transform-origin:center right}.section > [inert],.symbol > [inert]{margin:0 !important;position:absolute !important;z-index:-1}.digit{display:inline-block;position:relative;--c:var(--current) + var(${j})}.digit__num,.number .section::after{padding:${k} 0}.digit__num{display:inline-block;--offset-raw:mod(var(--length) + var(--n) - mod(var(--c),var(--length)),var(--length));--offset:calc( var(--offset-raw) - var(--length) * round(down,var(--offset-raw) / (var(--length) / 2),1) );--y:clamp(-100%,var(--offset) * 100%,100%);transform:translateY(var(--y))}.digit__num[inert]{position:absolute;top:0;left:50%;transform:translateX(-50%) translateY(var(--y))}.digit:not(.is-spinning) .digit__num[inert]{display:none}.symbol__value{display:inline-block;mix-blend-mode:plus-lighter;white-space:pre}.section--justify-left .symbol > [inert]{left:0}.section--justify-right .symbol > [inert]{right:0}.animate-presence{opacity:calc(1 + var(${$}))}`;
var G = true_default ? HTMLElement : class {
};
var K = V`:host{display:inline-block;direction:ltr;white-space:nowrap;line-height:${P} !important}span{display:inline-block}:host([data-will-change]) span{will-change:transform}.number,.digit{padding:${k} 0}.symbol{white-space:pre}`;
var Z = (n) => `<span class="${n.type === "integer" || n.type === "fraction" ? "digit" : "symbol"}" part="${n.type === "integer" || n.type === "fraction" ? `digit ${n.type}-digit` : `symbol ${n.type}`}">${n.value}</span>`;
var v = (n, t) => `<span part="${t}">${n.reduce((e, i2) => e + Z(i2), "")}</span>`;
var at = (n) => (
  // shadowroot="open" non-standard attribute for old Chrome:
  I`<template shadowroot="open" shadowrootmode="open"
			><style>
				${K}</style
			><span role="img" aria-label="${n.valueAsString}"
				>${v(n.pre, "left")}<span part="number" class="number"
					>${v(n.integer, "integer")}${v(n.fraction, "fraction")}</span
				>${v(n.post, "right")}</span
			></template
		><span
			style="font-kerning: none; display: inline-block; line-height: ${P} !important; padding: ${f2} 0;"
			>${n.valueAsString}</span
		>`
);
var q = z && O && Y;
var b;
var J = class extends G {
  constructor() {
    super(), this.created = false, this.batched = false;
    const { animated: t, ...e } = this.constructor.defaultProps;
    this._animated = this.computedAnimated = t, Object.assign(this, e);
  }
  get animated() {
    return this._animated;
  }
  set animated(t) {
    var e;
    this.animated !== t && (this._animated = t, (e = this.shadowRoot) == null || e.getAnimations().forEach((i2) => i2.finish()));
  }
  /**
   * @internal
   */
  set data(t) {
    var o;
    if (t == null)
      return;
    const { pre: e, integer: i2, fraction: s, post: a, value: r } = t;
    if (this.created) {
      const c = this._data;
      this._data = t, this.computedTrend = typeof this.trend == "function" ? this.trend(c.value, r) : this.trend, this.computedAnimated = q && this._animated && (!this.respectMotionPreference || !(A != null && A.matches)) && // https://github.com/barvian/number-flow/issues/9
      H(this), (o = this.plugins) == null || o.forEach((d) => {
        var p;
        return (p = d.onUpdate) == null ? void 0 : p.call(d, t, c, this);
      }), this.batched || this.willUpdate(), this._pre.update(e), this._num.update({ integer: i2, fraction: s }), this._post.update(a), this.batched || this.didUpdate();
    } else {
      this._data = t, this.attachShadow({ mode: "open" });
      try {
        this._internals ?? (this._internals = this.attachInternals()), this._internals.role = "img";
      } catch {
      }
      if (typeof CSSStyleSheet < "u" && this.shadowRoot.adoptedStyleSheets)
        b || (b = new CSSStyleSheet(), b.replaceSync(M)), this.shadowRoot.adoptedStyleSheets = [b];
      else {
        const c = document.createElement("style");
        c.textContent = M, this.shadowRoot.appendChild(c);
      }
      this._pre = new N(this, e, {
        justify: "right",
        part: "left"
      }), this.shadowRoot.appendChild(this._pre.el), this._num = new Q(this, i2, s), this.shadowRoot.appendChild(this._num.el), this._post = new N(this, a, {
        justify: "left",
        part: "right"
      }), this.shadowRoot.appendChild(this._post.el), this.created = true;
    }
    try {
      this._internals.ariaLabel = t.valueAsString;
    } catch {
    }
  }
  /**
   * @internal
   */
  willUpdate() {
    this._pre.willUpdate(), this._num.willUpdate(), this._post.willUpdate();
  }
  /**
   * @internal
   */
  didUpdate() {
    if (!this.computedAnimated)
      return;
    this._abortAnimationsFinish ? this._abortAnimationsFinish.abort() : this.dispatchEvent(new Event("animationsstart")), this._pre.didUpdate(), this._num.didUpdate(), this._post.didUpdate();
    const t = new AbortController();
    Promise.all(this.shadowRoot.getAnimations().map((e) => e.finished)).then(() => {
      t.signal.aborted || (this.dispatchEvent(new Event("animationsfinish")), this._abortAnimationsFinish = void 0);
    }), this._abortAnimationsFinish = t;
  }
};
J.defaultProps = {
  transformTiming: {
    duration: 900,
    // Make sure to keep this minified:
    easing: "linear(0,.005,.019,.039,.066,.096,.129,.165,.202,.24,.278,.316,.354,.39,.426,.461,.494,.526,.557,.586,.614,.64,.665,.689,.711,.731,.751,.769,.786,.802,.817,.831,.844,.856,.867,.877,.887,.896,.904,.912,.919,.925,.931,.937,.942,.947,.951,.955,.959,.962,.965,.968,.971,.973,.976,.978,.98,.981,.983,.984,.986,.987,.988,.989,.99,.991,.992,.992,.993,.994,.994,.995,.995,.996,.996,.9963,.9967,.9969,.9972,.9975,.9977,.9979,.9981,.9982,.9984,.9985,.9987,.9988,.9989,1)"
  },
  spinTiming: void 0,
  opacityTiming: { duration: 450, easing: "ease-out" },
  animated: true,
  trend: (n, t) => Math.sign(t - n),
  respectMotionPreference: true,
  plugins: void 0,
  digits: void 0
};
var Q = class {
  constructor(t, e, i2, { className: s, ...a } = {}) {
    this.flow = t, this._integer = new L(t, e, {
      justify: "right",
      part: "integer"
    }), this._fraction = new L(t, i2, {
      justify: "left",
      part: "fraction"
    }), this._inner = u("span", {
      className: "number__inner"
    }, [this._integer.el, this._fraction.el]), this.el = u("span", {
      ...a,
      part: "number",
      className: `number ${s ?? ""}`
    }, [this._inner]);
  }
  willUpdate() {
    this._prevWidth = this.el.offsetWidth, this._prevLeft = this.el.getBoundingClientRect().left, this._integer.willUpdate(), this._fraction.willUpdate();
  }
  update({ integer: t, fraction: e }) {
    this._integer.update(t), this._fraction.update(e);
  }
  didUpdate() {
    const t = this.el.getBoundingClientRect();
    this._integer.didUpdate(), this._fraction.didUpdate();
    const e = this._prevLeft - t.left, i2 = this.el.offsetWidth, s = this._prevWidth - i2;
    this.el.style.setProperty("--width", String(i2)), this.el.animate({
      [S]: [`${e}px`, "0px"],
      [U]: [s, 0]
    }, {
      ...this.flow.transformTiming,
      composite: "accumulate"
    });
  }
};
var W = class {
  constructor(t, e, { justify: i2, className: s, ...a }, r) {
    this.flow = t, this.children = /* @__PURE__ */ new Map(), this.onCharRemove = (c) => () => {
      this.children.delete(c);
    }, this.justify = i2;
    const o = e.map((c) => this.addChar(c).el);
    this.el = u("span", {
      ...a,
      className: `section section--justify-${i2} ${s ?? ""}`
    }, r ? r(o) : o);
  }
  addChar(t, { startDigitsAtZero: e = false, ...i2 } = {}) {
    const s = t.type === "integer" || t.type === "fraction" ? new D(this, t.type, e ? 0 : t.value, t.pos, {
      ...i2,
      onRemove: this.onCharRemove(t.key)
    }) : new tt(this, t.type, t.value, {
      ...i2,
      onRemove: this.onCharRemove(t.key)
    });
    return this.children.set(t.key, s), s;
  }
  unpop(t) {
    t.el.removeAttribute("inert"), t.el.style.top = "", t.el.style[this.justify] = "";
  }
  pop(t) {
    t.forEach((e) => {
      e.el.style.top = `${e.el.offsetTop}px`, e.el.style[this.justify] = `${F(e.el, this.justify)}px`;
    }), t.forEach((e) => {
      e.el.setAttribute("inert", ""), e.present = false;
    });
  }
  addNewAndUpdateExisting(t) {
    const e = /* @__PURE__ */ new Map(), i2 = /* @__PURE__ */ new Map(), s = this.justify === "left", a = s ? "prepend" : "append";
    if (X(t, (r) => {
      let o;
      this.children.has(r.key) ? (o = this.children.get(r.key), i2.set(r, o), this.unpop(o), o.present = true) : (o = this.addChar(r, { startDigitsAtZero: true, animateIn: true }), e.set(r, o)), this.el[a](o.el);
    }, { reverse: s }), this.flow.computedAnimated) {
      const r = this.el.getBoundingClientRect();
      e.forEach((o) => {
        o.willUpdate(r);
      });
    }
    e.forEach((r, o) => {
      r.update(o.value);
    }), i2.forEach((r, o) => {
      r.update(o.value);
    });
  }
  willUpdate() {
    const t = this.el.getBoundingClientRect();
    this._prevOffset = t[this.justify], this.children.forEach((e) => e.willUpdate(t));
  }
  didUpdate() {
    const t = this.el.getBoundingClientRect();
    this.children.forEach((s) => s.didUpdate(t));
    const e = t[this.justify], i2 = this._prevOffset - e;
    i2 && this.children.size && this.el.animate({
      transform: [`translateX(${i2}px)`, "none"]
    }, {
      ...this.flow.transformTiming,
      composite: "accumulate"
    });
  }
};
var L = class extends W {
  update(t) {
    const e = /* @__PURE__ */ new Map();
    this.children.forEach((i2, s) => {
      t.find((a) => a.key === s) || e.set(s, i2), this.unpop(i2);
    }), this.addNewAndUpdateExisting(t), e.forEach((i2) => {
      i2 instanceof D && i2.update(0);
    }), this.pop(e);
  }
};
var N = class extends W {
  update(t) {
    const e = /* @__PURE__ */ new Map();
    this.children.forEach((i2, s) => {
      t.find((a) => a.key === s) || e.set(s, i2);
    }), this.pop(e), this.addNewAndUpdateExisting(t);
  }
};
var R = class {
  constructor(t, e, { onRemove: i2, animateIn: s = false } = {}) {
    this.flow = t, this.el = e, this._present = true, this._remove = () => {
      var a;
      this.el.remove(), (a = this._onRemove) == null || a.call(this);
    }, this.el.classList.add("animate-presence"), this.flow.computedAnimated && s && this.el.animate({
      [$]: [-0.9999, 0]
    }, {
      ...this.flow.opacityTiming,
      composite: "accumulate"
    }), this._onRemove = i2;
  }
  get present() {
    return this._present;
  }
  set present(t) {
    if (this._present !== t) {
      if (this._present = t, t ? this.el.removeAttribute("inert") : this.el.setAttribute("inert", ""), !this.flow.computedAnimated) {
        t || this._remove();
        return;
      }
      this.el.style.setProperty("--_number-flow-d-opacity", t ? "0" : "-.999"), this.el.animate({
        [$]: t ? [-0.9999, 0] : [0.999, 0]
      }, {
        ...this.flow.opacityTiming,
        composite: "accumulate"
      }), t ? this.flow.removeEventListener("animationsfinish", this._remove) : this.flow.addEventListener("animationsfinish", this._remove, {
        once: true
      });
    }
  }
};
var B = class extends R {
  constructor(t, e, i2, s) {
    super(t.flow, i2, s), this.section = t, this.value = e, this.el = i2;
  }
};
var D = class extends B {
  constructor(t, e, i2, s, a) {
    var d, p;
    const r = (((p = (d = t.flow.digits) == null ? void 0 : d[s]) == null ? void 0 : p.max) ?? 9) + 1, o = Array.from({ length: r }).map((x, g) => {
      const y = u("span", { className: "digit__num" }, [
        document.createTextNode(String(g))
      ]);
      return g !== i2 && y.setAttribute("inert", ""), y.style.setProperty("--n", String(g)), y;
    }), c = u("span", {
      part: `digit ${e}-digit`,
      className: "digit"
    }, o);
    c.style.setProperty("--current", String(i2)), c.style.setProperty("--length", String(r)), super(t, i2, c, a), this.pos = s, this._onAnimationsFinish = () => {
      this.el.classList.remove("is-spinning");
    }, this._numbers = o, this.length = r;
  }
  willUpdate(t) {
    const e = this.el.getBoundingClientRect();
    this._prevValue = this.value;
    const i2 = e[this.section.justify] - t[this.section.justify], s = e.width / 2;
    this._prevCenter = this.section.justify === "left" ? i2 + s : i2 - s;
  }
  update(t) {
    this.el.style.setProperty("--current", String(t)), this._numbers.forEach((e, i2) => i2 === t ? e.removeAttribute("inert") : e.setAttribute("inert", "")), this.value = t;
  }
  didUpdate(t) {
    const e = this.el.getBoundingClientRect(), i2 = e[this.section.justify] - t[this.section.justify], s = e.width / 2, a = this.section.justify === "left" ? i2 + s : i2 - s, r = this._prevCenter - a;
    r && this.el.animate({
      transform: [`translateX(${r}px)`, "none"]
    }, {
      ...this.flow.transformTiming,
      composite: "accumulate"
    });
    const o = this.getDelta();
    o && (this.el.classList.add("is-spinning"), this.el.animate({
      [j]: [-o, 0]
    }, {
      ...this.flow.spinTiming ?? this.flow.transformTiming,
      composite: "accumulate"
    }), this.flow.addEventListener("animationsfinish", this._onAnimationsFinish, { once: true }));
  }
  getDelta() {
    var i2;
    if (this.flow.plugins)
      for (const s of this.flow.plugins) {
        const a = (i2 = s.getDelta) == null ? void 0 : i2.call(s, this.value, this._prevValue, this);
        if (a != null)
          return a;
      }
    const t = this.value - this._prevValue, e = this.flow.computedTrend || Math.sign(t);
    return e < 0 && this.value > this._prevValue ? this.value - this.length - this._prevValue : e > 0 && this.value < this._prevValue ? this.length - this._prevValue + this.value : t;
  }
};
var tt = class extends B {
  constructor(t, e, i2, s) {
    const a = u("span", {
      className: "symbol__value",
      textContent: i2
    });
    super(t, i2, u("span", {
      part: `symbol ${e}`,
      className: "symbol"
    }, [a]), s), this.type = e, this._children = /* @__PURE__ */ new Map(), this._onChildRemove = (r) => () => {
      this._children.delete(r);
    }, this._children.set(i2, new R(this.flow, a, {
      onRemove: this._onChildRemove(i2)
    }));
  }
  willUpdate(t) {
    if (this.type === "decimal")
      return;
    const e = this.el.getBoundingClientRect();
    this._prevOffset = e[this.section.justify] - t[this.section.justify];
  }
  update(t) {
    if (this.value !== t) {
      const e = this._children.get(this.value);
      e && (e.present = false);
      const i2 = this._children.get(t);
      if (i2)
        i2.present = true;
      else {
        const s = u("span", {
          className: "symbol__value",
          textContent: t
        });
        this.el.appendChild(s), this._children.set(t, new R(this.flow, s, {
          animateIn: true,
          onRemove: this._onChildRemove(t)
        }));
      }
    }
    this.value = t;
  }
  didUpdate(t) {
    if (this.type === "decimal")
      return;
    const i2 = this.el.getBoundingClientRect()[this.section.justify] - t[this.section.justify], s = this._prevOffset - i2;
    s && this.el.animate({
      transform: [`translateX(${s}px)`, "none"]
    }, { ...this.flow.transformTiming, composite: "accumulate" });
  }
};

// node_modules/@number-flow/react/dist/NumberFlow-client-48rw3j0J.mjs
var React = __toESM(require_react(), 1);
var _a;
var REACT_MAJOR = parseInt((_a = React.version.match(/^(\d+)\./)) == null ? void 0 : _a[1]);
var isReact19 = REACT_MAJOR >= 19;
var OBSERVED_ATTRIBUTES = [
  "data",
  "digits"
];
var NumberFlowElement = class extends J {
  attributeChangedCallback(attr, _oldValue, newValue) {
    this[attr] = JSON.parse(newValue);
  }
};
NumberFlowElement.observedAttributes = isReact19 ? [] : OBSERVED_ATTRIBUTES;
st("number-flow-react", NumberFlowElement);
var formatters = {};
var serialize = isReact19 ? (p) => p : JSON.stringify;
function splitProps(props) {
  const { transformTiming, spinTiming, opacityTiming, animated, respectMotionPreference, trend, plugins, ...rest } = props;
  return [
    {
      transformTiming,
      spinTiming,
      opacityTiming,
      animated,
      respectMotionPreference,
      trend,
      plugins
    },
    rest
  ];
}
var NumberFlowImpl = class extends React.Component {
  // Update the non-`data` props to avoid JSON serialization
  // Data needs to be set in render still:
  updateProperties(prevProps) {
    if (!this.el) return;
    this.el.batched = !this.props.isolate;
    const [nonData] = splitProps(this.props);
    Object.entries(nonData).forEach(([k2, v2]) => {
      this.el[k2] = v2 ?? NumberFlowElement.defaultProps[k2];
    });
    if (prevProps == null ? void 0 : prevProps.onAnimationsStart) this.el.removeEventListener("animationsstart", prevProps.onAnimationsStart);
    if (this.props.onAnimationsStart) this.el.addEventListener("animationsstart", this.props.onAnimationsStart);
    if (prevProps == null ? void 0 : prevProps.onAnimationsFinish) this.el.removeEventListener("animationsfinish", prevProps.onAnimationsFinish);
    if (this.props.onAnimationsFinish) this.el.addEventListener("animationsfinish", this.props.onAnimationsFinish);
  }
  componentDidMount() {
    this.updateProperties();
    if (isReact19 && this.el) {
      this.el.digits = this.props.digits;
      this.el.data = this.props.data;
    }
  }
  getSnapshotBeforeUpdate(prevProps) {
    var _a2;
    this.updateProperties(prevProps);
    if (prevProps.data !== this.props.data) {
      if (this.props.group) {
        this.props.group.willUpdate();
        return () => {
          var _a3;
          return (_a3 = this.props.group) == null ? void 0 : _a3.didUpdate();
        };
      }
      if (!this.props.isolate) {
        (_a2 = this.el) == null ? void 0 : _a2.willUpdate();
        return () => {
          var _a3;
          return (_a3 = this.el) == null ? void 0 : _a3.didUpdate();
        };
      }
    }
    return null;
  }
  componentDidUpdate(_, __, didUpdate) {
    didUpdate == null ? void 0 : didUpdate();
  }
  handleRef(el) {
    if (this.props.innerRef) this.props.innerRef.current = el;
    this.el = el;
  }
  render() {
    const [_, { innerRef, className, data, willChange, isolate, group, digits, onAnimationsStart, onAnimationsFinish, ...rest }] = splitProps(this.props);
    return (
      // @ts-expect-error missing types
      React.createElement("number-flow-react", {
        ref: this.handleRef,
        "data-will-change": willChange ? "" : void 0,
        // Have to rename this:
        class: className,
        ...rest,
        dangerouslySetInnerHTML: {
          __html: true_default ? "" : at(data)
        },
        suppressHydrationWarning: true,
        digits: serialize(digits),
        // Make sure data is set last, everything else is updated:
        data: serialize(data)
      })
    );
  }
  constructor(props) {
    super(props);
    this.handleRef = this.handleRef.bind(this);
  }
};
var NumberFlow = React.forwardRef(function NumberFlow2({ value, locales, format, prefix, suffix, ...props }, _ref) {
  React.useImperativeHandle(_ref, () => ref.current, []);
  const ref = React.useRef();
  const group = React.useContext(NumberFlowGroupContext);
  group == null ? void 0 : group.useRegister(ref);
  const localesString = React.useMemo(() => locales ? JSON.stringify(locales) : "", [
    locales
  ]);
  const formatString = React.useMemo(() => format ? JSON.stringify(format) : "", [
    format
  ]);
  const data = React.useMemo(() => {
    var _a2;
    const formatter = formatters[_a2 = `${localesString}:${formatString}`] ?? (formatters[_a2] = new Intl.NumberFormat(locales, format));
    return nt(value, formatter, prefix, suffix);
  }, [
    value,
    localesString,
    formatString,
    prefix,
    suffix
  ]);
  return React.createElement(NumberFlowImpl, {
    ...props,
    group,
    data,
    innerRef: ref
  });
});
var NumberFlowGroupContext = React.createContext(void 0);
function NumberFlowGroup({ children }) {
  const flows = React.useRef(/* @__PURE__ */ new Set());
  const updating = React.useRef(false);
  const pending = React.useRef(/* @__PURE__ */ new WeakMap());
  const value = React.useMemo(() => ({
    useRegister(ref) {
      React.useEffect(() => {
        flows.current.add(ref);
        return () => {
          flows.current.delete(ref);
        };
      }, []);
    },
    willUpdate() {
      if (updating.current) return;
      updating.current = true;
      flows.current.forEach((ref) => {
        const f3 = ref.current;
        if (!f3 || !f3.created) return;
        f3.willUpdate();
        pending.current.set(f3, true);
      });
    },
    didUpdate() {
      flows.current.forEach((ref) => {
        const f3 = ref.current;
        if (!f3 || !pending.current.get(f3)) return;
        f3.didUpdate();
        pending.current.delete(f3);
      });
      updating.current = false;
    }
  }), []);
  return React.createElement(NumberFlowGroupContext.Provider, {
    value
  }, children);
}

// node_modules/@number-flow/react/dist/index.mjs
var useIsSupported = () => React2.useSyncExternalStore(() => () => {
}, () => q, () => false);
var usePrefersReducedMotion = () => React2.useSyncExternalStore((cb) => {
  var _a2;
  (_a2 = A) == null ? void 0 : _a2.addEventListener("change", cb);
  return () => {
    var _a3;
    return (_a3 = A) == null ? void 0 : _a3.removeEventListener("change", cb);
  };
}, () => A.matches, () => false);
function useCanAnimate({ respectMotionPreference = true } = {}) {
  const isSupported = useIsSupported();
  const reducedMotion = usePrefersReducedMotion();
  return isSupported && (!respectMotionPreference || !reducedMotion);
}
export {
  NumberFlowElement,
  NumberFlowGroup,
  l as continuous,
  NumberFlow as default,
  useCanAnimate,
  useIsSupported,
  usePrefersReducedMotion
};
//# sourceMappingURL=@number-flow_react.js.map
